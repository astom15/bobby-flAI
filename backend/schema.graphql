type User {
  id: ID!
  name: String!
  email: String!
  imageUrl: String
  allergies: [String!]!
  preferences: [String!]!
  countryCode: String
  region: String
}

input EditUserInput {
  name: String
  email: String
  imageUrl: String
  allergies: [String!]
  preferences: [String!]
  countryCode: String
  region: String
}

input ItemRemoval {
  allergies: [String!]
  preferences: [String!]
}

type Query {
  getUser(id: String!): User
  getChat(id: String!): Chat
  getChats(userId: String!): [Chat!]!
  searchMessages(phrase: String!): [ChatPreview!]!
}

type Mutation {
  createUser(name: String!, email: String!, password: String!, allergies: [String], preferences: [String], countryCode: String, region: String): User!
  deleteUser(id: ID!): String!
  editUser(id: ID!, input: EditUserInput, removalInput: ItemRemoval): User!
  createChat(input: NewChatInput!): Chat!
  updateChat(id: String!, name: String!): Chat!
  deleteChat(id: String!): String!
  sendMessage(input: MessageInput): Message!
  editMessage(input: MessageInput): Message!
}

type Chat {
  id: ID!
  userId: ID!
  name: String!
  messages: [Message!]!
  createdAt: String!
  updatedAt: String!
}

input NewChatInput {
  userId: ID!
  status: ChatStatus!
}

enum ChatStatus {
  TEMPORARY
  ACTIVE
}

type ChatPreview {
  id: ID!
  name: String!
}

type Message {
  id: ID!
  chatId: ID!
  sender: Sender!
  content: String!
  imageUrl: String
  createdAt: String
  updatedAt: String
}

enum Sender {
  BOT
  USER
}

input MessageInput {
  chatId: ID!
  sender: Sender!
  content: String!
  imageUrl: String
}

schema {
  query: Query
  mutation: Mutation
}